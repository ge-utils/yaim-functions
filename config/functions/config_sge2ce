##############################################################################
# Copyright (c) Members of the EGEE Collaboration. 2004.
# See http://www.eu-egee.org/partners/ for details on the copyright holders.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
##############################################################################
#
# NAME        : config_sge2ce
#
# DESCRIPTION : This function enables an lcg-CE 3.1 to work as a SGE submission host, 
#               being able to query/interact with the SGE QMASTER host (which may 
#               be working in a different machine)
#
# AUTHORS     : goncalo@lip.pt
#
# NOTES       : - Tested in SGE V60u7_1, V61u3
#             : - Configures the SGE infoprovider and SGE JobManager
#
# YAIM MODULE : glite-yaim-sge-utils
#
##############################################################################


function config_sge2ce_check(){
    requires $1 QUEUES SGE_ROOT SGE_CELL BATCH_SERVER MY_DOMAIN
    return $?
}


function config_sge2ce_setenv(){
    return 0
}


function config_sge2ce(){

INSTALL_ROOT=${INSTALL_ROOT:-/opt}

#---*---

yaimlog DEBUG "###"
yaimlog DEBUG "### Get gLite version "
yaimlog DEBUG "###"

glite_version=`echo /opt/glite/bin/glite-version | cut -d '.' -f1-2`
if [ "X$glite_version" == "X3.1" ]; then
   yaimlog INFO "Running SGE configuration for gLite version >= 3.1"
elif [ "X$glite_version" == "X" -or "X$glite_version" != "3.1" ]; then 
   yaimlog ABORT "gLite version not supported. Exiting..."  
   exit 1
fi

#---*---

yaimlog DEBUG "###"
yaimlog DEBUG "### Create SGE configuration files needed for the submission host"
yaimlog DEBUG "###"

yaimlog INFO \
yaimlog INFO " Set proper SGE environment"
if [ ! -d ${SGE_ROOT}/${SGE_CELL} ]; then
   yaimlog WARNING " ${SGE_ROOT}/${SGE_CELL} doesn't exist. Probably SGE is not installed yet..."
   yaimlog INFO " Making ${SGE_ROOT}/${SGE_CELL} ..."
   mkdir ${SGE_ROOT}/${SGE_CELL}
   yaimlog INFO " Making ${SGE_ROOT}/${SGE_CELL}/common ..."
   mkdir ${SGE_ROOT}/${SGE_CELL}/common
fi

BOOTSTRAP_FILE=$SGE_ROOT/$SGE_CELL/common/bootstrap
yaimlog INFO " Checking if ${BOOTSTRAP_FILE} exists..."
if [ ! -e ${BOOTSTRAP_FILE} ]; then
   yaimlog INFO " Making ${SGE_ROOT}/${SGE_CELL}/common/bootstrap ..."
   cat <<EOF > ${BOOTSTRAP_FILE}
admin_user        none
default_domain    $MY_DOMAIN
ignore_fqdn       true
spooling_method   classic
spooling_lib      libspoolc
spooling_params   ${SGE_ROOT}/${SGE_CELL}/common;${SGE_ROOT}/${SGE_CELL}/spool/qmaster
binary_path       ${SGE_ROOT}/bin
qmaster_spool_dir ${SGE_ROOT}/${SGE_CELL}/spool/qmaster
security_mode     none
EOF
fi

ACT_QMASTER_FILE=$SGE_ROOT/$SGE_CELL/common/act_qmaster
yaimlog INFO " Checking if ${ACT_QMASTER_FILE} exists..."
cat <<EOF > ${ACT_QMASTER_FILE}
${BATCH_SERVER}
EOF

#---*---

yaimlog DEBUG "###"
yaimlog DEBUG "### Build the scripts which set the proper SGE environment"
yaimlog DEBUG "###"

yaimlog INFO " Create /etc/profile.d/sge.sh and /etc/profile.d/sge.csh"

SGE_SHENV_FILE=/etc/profile.d/sge.sh
if [ -e $SGE_SHENV_FILE ]; then
   rm -f $SGE_SHENV_FILE
fi
cat <<EOF > ${SGE_SHENV_FILE}
# Define SGE_ROOT directory and SGE commands
export SGE_ROOT=${SGE_ROOT}
export SGE_CELL=${SGE_CELL}
. ${SGE_ROOT}/${SGE_CELL}/common/settings.sh
EOF

SGE_CSHENV_FILE=/etc/profile.d/sge.csh
if [ -e $SGE_CSHENV_FILE ]; then
   rm -f $SGE_CSHENV_FILE
fi
cat <<EOF > ${SGE_CSHENV_FILE}
# Define SGE_ROOT directory and SGE commands
setenv SGE_ROOT "${SGE_ROOT}"
setenv SGE_CELL "${SGE_CELL}"
source ${SGE_ROOT}/${SGE_CELL}/common/settings.csh
EOF

SGE_SHSETTING_FILE=${SGE_ROOT}/${SGE_CELL}/common/settings.sh
yaimlog INFO " Check if ${SGE_SHSETTING_FILE} exists. If not, create it!"
if [ -e ${SGE_SHSETTING_FILE} ]; then
   yaimlog WARNING " ${SGE_SHSETTING_FILE} exists. "
   yaimlog WARNING " Your old file will be saved as ${SGE_SHSETTING_FILE}.OLD"
   mv -f ${SGE_SHSETTING_FILE} ${SGE_SHSETTING_FILE}.OLD
fi

cat <<EOF > ${SGE_SHSETTING_FILE}
#!/bin/bash
SGE_ROOT=${SGE_ROOT}; export SGE_ROOT
ARCH=\`\$SGE_ROOT/util/arch\`
DEFAULTMANPATH=\`\$SGE_ROOT/util/arch -m\`
MANTYPE=\`\$SGE_ROOT/util/arch -mt\`
SGE_CELL=${SGE_CELL}; export SGE_CELL
SGE_QMASTER_PORT=536; export SGE_QMASTER_PORT
SGE_EXECD_PORT=537; export SGE_EXECD_PORT
if [ "\$MANPATH" = "" ]; then
        MANPATH=\$DEFAULTMANPATH
fi
MANPATH=\$SGE_ROOT/\$MANTYPE:\$MANPATH; export MANPATH
PATH=\$SGE_ROOT/bin/\$ARCH:\$PATH; export PATH
shlib_path_name=\`\$SGE_ROOT/util/arch -lib\`
old_value=\`eval echo '\$'\$shlib_path_name\`
if [ x\$old_value = x ]; then
        eval \$shlib_path_name=\$SGE_ROOT/lib/\$ARCH
else
        eval \$shlib_path_name=\$SGE_ROOT/lib/\$ARCH:\$old_value
fi
export \$shlib_path_name
unset ARCH DEFAULTMANPATH MANTYPE shlib_path_name
EOF

chmod 644 ${SGE_SHSETTING_FILE}
source ${SGE_SHENV_FILE}

SGE_CSHSETTING_FILE=${SGE_ROOT}/${SGE_CELL}/common/settings.csh
yaimlog INFO " Check if ${SGE_CSHSETTING_FILE} exists. If not, create it!"
if [ -e ${SGE_CSHSETTING_FILE} ]; then
   yaimlog WARNING " ${SGE_CSHSETTING_FILE} exists. "
   yaimlog WARNING " Your old file will be saved as ${SGE_CSHSETTING_FILE}.OLD"
   mv -f ${SGE_CSHSETTING_FILE} ${SGE_CSHSETTING_FILE}.OLD
fi

cat <<EOF > ${SGE_CSHSETTING_FILE}
#!/bin/tcsh
setenv SGE_ROOT $SGE_ROOT
set ARCH=\`\$SGE_ROOT/util/arch\`
set DEFAULTMANPATH=\`\$SGE_ROOT/util/arch -m\`
set MANTYPE=\`\$SGE_ROOT/util/arch -mt\`
setenv SGE_CELL $SGE_CELL
unsetenv SGE_QMASTER_PORT
unsetenv SGE_EXECD_PORT
if ( \$\?MANPATH == 1 ) then
   setenv MANPATH \$SGE_ROOT/\${MANTYPE}:\$MANPATH
else
   setenv MANPATH \$SGE_ROOT/\${MANTYPE}:\$DEFAULTMANPATH
endif
set path=( \$SGE_ROOT/bin/\$ARCH \$path )
set shlib_path_name=\`\$SGE_ROOT/util/arch -lib\`
if ( \`eval echo '\$?'\$shlib_path_name\` ) then
   set old_value=\`eval echo '\$'\$shlib_path_name\`
   setenv \$shlib_path_name "\$SGE_ROOT/lib/\$ARCH":"\$old_value"
else
   setenv \$shlib_path_name \$SGE_ROOT/lib/\$ARCH
endif
unset ARCH DEFAULTMANPATH MANTYPE shlib_path_name
EOF

chmod 644 ${SGE_CSHSETTING_FILE}

#---*---

yaimlog DEBUG "###"
yaimlog DEBUG "### Link binaries to lx26-x86 (original compilation)"
yaimlog DEBUG "###"

ARCH=`$SGE_ROOT/util/arch`
ARCH_DEFAULT=lx26-x86
if [ "X$ARCH" != "X$ARCH_DEFAULT" ]
then
   ln -s $SGE_ROOT/bin/$ARCH_DEFAULT $SGE_ROOT/bin/$ARCH
   ln -s $SGE_ROOT/utilbin/$ARCH_DEFAULT $SGE_ROOT/utilbin/$ARCH
   ln -s $SGE_ROOT/lib/$ARCH_DEFAULT $SGE_ROOT/lib/$ARCH
fi

#---*---

yaimlog DEBUG "###"
yaimlog DEBUG "### Define default sge_qstat options"
yaimlog DEBUG "###"

SGE_QSTAT_OPTIONS_FILE=${SGE_ROOT}/${SGE_CELL}/common/sge_qstat
if [ -e $SGE_QSTAT_OPTIONS_FILE ]; then
   rm -f $SGE_QSTAT_OPTIONS_FILE
fi
cat <<EOF > $SGE_QSTAT_OPTIONS_FILE
-u *
EOF

#---*---

yaimlog DEBUG "###"
yaimlog DEBUG "### Modify /etc/services file and add the appropriate ports for SGE daemons"
yaimlog DEBUG "###"

SERVICES_FILE=/etc/services
yaimlog INFO \
yaimlog INFO " Configuring sgemaster daemon in $SERVICES_FILE"
PORT1="X"`grep "536/tcp" $SERVICES_FILE | grep -v sge`
if [ "${PORT1}" != "X" ]; then
     yaimlog ABORT " Port 536/tcp is already used by other service. Check $SERVICES_FILE"
     exit 1
fi
VAR1="X"`grep ^sge_qmaster $SERVICES_FILE`
if [ "${VAR1}" == "X" ]; then
     yaimlog INFO " Adding sge_qmaster in $SERVICES_FILE"
     echo "sge_qmaster     536/tcp           # tcp port for SGE Qmaster daemon" >> $SERVICES_FILE
fi
PORT2="X"`grep "537/tcp" $SERVICES_FILE | grep -v sge`
if [ "${PORT2}" != "X" ]; then
     yaimlog ABORT " Port 537/tcp is already used by other service. Check $SERVICES_FILE"
     exit 1
fi
VAR2="X"`grep ^sge_execd $SERVICES_FILE`
if [ "${VAR2}" == "X" ]; then
     yaimlog INFO " Adding sge_execd in $SERVICES_FILE"
     echo "sge_execd       537/tcp           # tcp port for SGE execd service" >> $SERVICES_FILE
fi

#---*---

yaimlog DEBUG "###"
yaimlog DEBUG "### Build JobManager configuration files"
yaimlog DEBUG "### Fully based on CESGA implementation"
yaimlog DEBUG "###"

yaimlog INFO \ 
yaimlog INFO " Building SGE JobManager configuration files"

SGE_JOBMANAGER=$INSTALL_ROOT/globus/lib/perl/Globus/GRAM/JobManager/lcgsge.pm
if [ ! -e $SGE_JOBMANAGER ]; then
   yaimlog ERROR " SGE JobManager is not installed !!! Without it Job Management will not work..."
   yaimlog ERROR " SGE JobManager configuration will continue... SGE will work after lcgsge.pm is installed and without re-configuration..." 
fi

#---*---

yaimlog DEBUG "###"
yaimlog DEBUG "### SGE JM configuration file"
yaimlog DEBUG "###"

SGE_JOBMANAGER_CONF=$INSTALL_ROOT/globus/lib/perl/Globus/GRAM/JobManager/lcgsge.conf
yaimlog INFO " Installing SGE Job manager configuration files" 
if [ -e $SGE_JOBMANAGER_CONF ]; then
   yaimlog WARNING " $SGE_JOBMANAGER_CONF already exists. "
   yaimlog WARNING " Your old configuration will be saved as ${SGE_JOBMANAGER_CONF}.OLD "
   mv -f $SGE_JOBMANAGER_CONF ${SGE_JOBMANAGER_CONF}.OLD
fi

cat <<EOF > $SGE_JOBMANAGER_CONF
# SGE JM Configuration File
#
# SGE paths
\$SGE_BASE_PATH    = '$SGE_ROOT';
\$SGE_BIN_PATH     = '$SGE_ROOT/bin/$ARCH';
# Default values for SGE required complex values
# In case SGE forces to specify a given set of parameters you can
# specify the default values in this section
# If you don't need to define some parameter you should to set it
# to an empty string or to 0. 
# Parameters that could be availables in the jdl file
# These values are only use in case a value is not specified
# in the jdl file
# max cpu time
#\$S_RT           = '10:00:00';
\$S_RT            = '';
# max memory
#\$S_VMEM         = '512M';
\$S_VMEM          = '';
# number of processors
#\$NUM_PROC       = 1;
\$NUM_PROC        = 0;
# Extra parameters not available in the jdl file.
#\$EXTRA          = 'h_fsize=5G,s_cpu=0:10:0';
\$EXTRA          = '';
EOF

#---*---*---*---*---*---*---*---*---*---*---*---*---*---*---*---*---*---*---*---*---*---

yaimlog DEBUG "###"
yaimlog DEBUG "### Build InfoProvider configuration files"
yaimlog DEBUG "### Fully based on LeSC implementation"
yaimlog DEBUG "###"

yaimlog INFO \
yaimlog INFO " Installing InfoProvider configuration files "
SGE_INFOPROVIDER_DIR=/etc/sge-jobmanager
SGE_INFOPROVIDER_VQUEUES=$SGE_INFOPROVIDER_DIR/vqueues.conf
SGE_INFOPROVIDER_REPORTER=$SGE_INFOPROVIDER_DIR/info-reporter.conf
SGE_INFOPROVIDER_CLUSTER=$SGE_INFOPROVIDER_DIR/cluster.state

SGE_INFOPROVIDER=$INSTALL_ROOT/lcg/libexec/lcg-info-dynamic-sge
if [ ! -e $SGE_INFOPROVIDER ]; then
   yaimlog ERROR " SGE InfoProvider is not installed !!! Without it the information system will not work..."
   yaimlog ERROR " SGE InfoProvider configuration will continue... SGE information system will work after lcg-info-dynamic-sge is installed and without re-configuration..."
else
   yaimlog INFO " Check SGE dynamic information plugin file permissions"
   if [ -x $SGE_INFOPROVIDER ]; then
      yaimlog INFO " $SGE_INFOPROVIDER has correct permissions"
   else
      yaimlog INFO " $SGE_INFOPROVIDER does not has the correct permissions. Changing them ..."
      chmod +x $SGE_INFOPROVIDER
   fi
fi

if [ ! -d $SGE_INFOPROVIDER_DIR ]; then
   mkdir $SGE_INFOPROVIDER_DIR
fi 

#---*---

yaimlog DEBUG "###"
yaimlog DEBUG "### Virtual queue configuration file"
yaimlog DEBUG "###"

if [ -e $SGE_INFOPROVIDER_VQUEUES ]; then
   yaimlog WARNING " $SGE_INFOPROVIDER_VQUEUES file already exists."
   yaimlog WARNING " Your old configuration will be saved under ${SGE_INFOPROVIDER_VQUEUES}.OLD "
   mv -f $SGE_INFOPROVIDER_VQUEUES ${SGE_INFOPROVIDER_VQUEUES}.OLD
fi

yaimlog INFO " Creating $SGE_INFOPROVIDER_VQUEUES file..."
cat <<EOF >> $SGE_INFOPROVIDER_VQUEUES
#
# SGE JobManager queue mapping file
#
# It is sometimes desirable to be able to override various RSL properties of
# jobs submitted to Globus based on the name of the queue that was requested.
#
# For example, LCG 2_6_0 resource brokers only allow an end user to specify
# a particular queue or set of queues for a job to be submitted to, but not
# to specify any other details about the job, such as how long it will take
# to execute.
#
# This file allows you to override the properties of a job based on the name
# of the logical queue that it was submitted to.
#
# Set of properties you can manipulate:
# ------------------------------------
# queue:                Set the target queue to submit to.
#                       NOTE: All property matches will match against the
#                             originally specified queue, not the new queue.
# max_cpu_time:         Hard CPU time limit, in minutes.
# max_wall_time:        Hard wallclock time limit, in minutes.
#
# (There is undocumented support for other fields.)
#
# Spaces are currently not permitted as any value.
#
# Virtual
# Queue         Property                New Value
# --------------------------------------------------
EOF

for QUEUE in `echo $QUEUES | sed 's/"//g'` ; do
   cat <<EOF >> $SGE_INFOPROVIDER_VQUEUES
$QUEUE          queue                   $QUEUE
EOF
done

#---*---

yaimlog DEBUG "###"
yaimlog DEBUG "### Reporter configuration file"
yaimlog DEBUG "###"

if [ -e $SGE_INFOPROVIDER_REPORTER ]; then
   yaimlog WARNING " $SGE_INFOPROVIDER_REPORTER file already exists."
   yaimlog WARNING " Your old configuration will be saved under ${SGE_INFOPROVIDER_REPORTER}.OLD "
   mv -f $SGE_INFOPROVIDER_REPORTER ${SGE_INFOPROVIDER_REPORTER}.OLD
fi

yaimlog INFO " Creating $SGE_INFOPROVIDER_REPORTER file..."
cat <<EOF >> $SGE_INFOPROVIDER_REPORTER
#
# Sample configuration file for SGE information reporter
# ======================================================
#
# The default location of this file is /etc/sge-jobmanager/info-reporter.conf
# however this can be overriden on the command line

# Default values are shown below

##############################################################################
# SGE Environment Variables...

SGE_ROOT = $SGE_ROOT
SGE_ARCH = `$SGE_ROOT/util/arch`
SGE_CELL = $SGE_CELL

##############################################################################
# Override location of SGE commands...
# The default values are calculated using the environment variables above
# so these configuration values shouldn't normally need to be specified

# qconf_command =
# qstat_command =
# qselect_command =

##############################################################################
# Location of static LDIF file...

ldif_file = $INSTALL_ROOT/glite/etc/gip/ldif/static-file-CE.ldif

##############################################################################
# Location of SGE jobmanager virtual queue mapping configuration file

vqueue_file = /etc/sge-jobmanager/vqueues.conf

##############################################################################
# Location of file defining current cluster state
# This file should contain one of the following strings:
#     Production, Draining, Queueing, Closed

state_file = /etc/sge-jobmanager/cluster.state

##############################################################################
# Regular expressions matching SGE "queue instances" (ie: queue@hostname)
# that should be included/excluded from our calculations...
#
# Default is to include everything and exclude nothing
# Specifying these values may distort the estimated response times

# queue_include_regexp = ^.*$
# queue_exclude_regexp =

##############################################################################
# Regular expressions matching usernames that should be included/excluded
# from our calculations
#
# Default is to include everything and exclude nothing
# Specifying these values may distort the estimated response times

# user_include_regexp = ^.*$
# user_exclude_regexp =

##############################################################################
# Job efficiency
# Used to convert cpu-time limits into estimated wallclock runtimes
# eg:  1.0 would specify that jobs typically run at 100% efficiency
#          and therefore the wallclock runtime equals the cpu time
#      0.6 would specify that jobs typically only run at 60% efficiency

# job_efficiency = 0.9

##############################################################################
# Default duration of jobs for which a time limit cannot be determined
# Can be specified as <seconds>, <hours>:<minutes>:<seconds>
#     or <days>:<hours>:<minutes>:<seconds>

# default_duration = 7:00:00:00

##############################################################################
# File in which to capture information used by the information reporter
# to generate its results.
# Information from this file can be converted into test data to allow the
# calculations to be replayed for debugging/development purposes
# Once created, the file will not be overwritten
# If a fresh capture is required, then the filename should be changed
# or the file should be deleted

# capture_file = capture_file_22012007
EOF

#---*---

yaimlog DEBUG "###"
yaimlog DEBUG "### Cluster Status "
yaimlog DEBUG "###"

yaimlog INFO " Set Cluster status to Production..."
rm -f $SGE_INFOPROVIDER_CLUSTER
cat <<EOF >> $SGE_INFOPROVIDER_CLUSTER
Production
EOF

#---*---

yaimlog DEBUG "###"
yaimlog DEBUG "### CE Plugin File"
yaimlog DEBUG "###"

yaimlog INFO " Configure SGE dynamic information plugin"
CE_PLUGIN_FILE=${INSTALL_ROOT}/glite/etc/gip/plugin/glite-info-dynamic-ce
if [ -e $CE_PLUGIN_FILE ]; then
   rm -f $CE_PLUGIN_FILE
fi 
plugin=${INSTALL_ROOT}/lcg/libexec/lcg-info-dynamic-sge
cat <<EOF > $CE_PLUGIN_FILE
#!/bin/sh
$plugin
EOF

chmod +x ${INSTALL_ROOT}/glite/etc/gip/plugin/glite-info-dynamic-ce

#---*---

yaimlog DEBUG "###"
yaimlog DEBUG "### Include dynamic script in /opt/lcg/etc/lcg-info-generic.conf"
yaimlog DEBUG "###"

GLITE_INFO_GENERIC_CONF=/opt/glite/etc/gip/glite-info-generic.conf
yaimlog INFO " Configuring $SGE_INFOPROVIDER in $GLITE_INFO_GENERIC_CONF as dynamic script"

if [ ! -e $GLITE_INFO_GENERIC_CONF ]; then
   yaimlog ABORT " $GLITE_INFO_GENERIC_CONF does not exist"
   exit 1
fi

dynamic_script_exists=`grep dynamic_script $GLITE_INFO_GENERIC_CONF`
if [ $dynamic_script_exists==""  ]; then
   echo "dynamic_script = /opt/lcg/libexec/lcg-info-dynamic-sge" > /opt/glite/etc/gip/glite-info-generic.conf.tmp
   cat /opt/glite/etc/gip/glite-info-generic.conf >> /opt/glite/etc/gip/glite-info-generic.conf.tmp
   mv -f /opt/glite/etc/gip/glite-info-generic.conf.tmp /opt/glite/etc/gip/glite-info-generic.conf
else
   yaimlog WARNING " A dynamic script is already configured in $GLITE_INFO_GENERIC_CONF"
   yaimlog WARNING " Rewritting current implementation \"$dynamic_script_exists\" "
   echo "dynamic_script = /opt/lcg/libexec/lcg-info-dynamic-sge" > /opt/glite/etc/gip/glite-info-generic.conf.tmp
   cat /opt/glite/etc/gip/glite-info-generic.conf | grep -v dynamic_script >> /opt/glite/etc/gip/glite-info-generic.conf.tmp 
   mv -f /opt/glite/etc/gip/glite-info-generic.conf.tmp /opt/glite/etc/gip/glite-info-generic.conf
fi

#---*---

yaimlog DEBUG "###"
yaimlog DEBUG "### Comment the content of glite-info-dynamic-scheduler-wrapper"
yaimlog DEBUG "###"

yaimlog INFO " Comment the content of glite-info-dynamic-scheduler-wrapper. Not used in SGE"
CE_SCHEDULER_WRAPPER_FILE=${INSTALL_ROOT}/glite/etc/gip/plugin/glite-info-dynamic-scheduler-wrapper
if [ -e $CE_SCHEDULER_WRAPPER_FILE ]; then
   rm -f $CE_SCHEDULER_WRAPPER_FILE
fi
cat <<EOF > $CE_SCHEDULER_WRAPPER_FILE
#!/bin/sh
# /opt/lcg/libexec/lcg-info-dynamic-scheduler -c /opt/glite/etc/lcg-info-dynamic-scheduler.conf
EOF

#---*---

yaimlog DEBUG "###"
yaimlog DEBUG "### Restart information system after reconfiguring SGE"
yaimlog DEBUG "###"

/etc/init.d/bdii stop
/etc/init.d/bdii start

}

